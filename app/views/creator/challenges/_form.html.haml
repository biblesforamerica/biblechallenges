- if @challenge.errors.any?
  - flash[:error] = @challenge.errors.full_messages.to_sentence

.section.primary.centered
  .container
    .title
      = controller.action_name.capitalize
      Challenge

%section.container
  .row
    .col-md-6.col-md-offset-3

      = form_for [:creator, @challenge], html: {class: 'form-horizontal'} do |f|
        .form-group
          = f.label :name, "Challenge Name"
          = f.text_field :name, required: true, class: "form-control"
          %p.help-block The name of your challenge, for example "The Book of Acts in July"

        .form-group
          = f.label :begindate, "Begin Date"
          = f.text_field :begindate, value: f.object.begindate.try(:strftime,"%A, %-d %b, %Y"), required: true, class: "form-control", data: {behaviour: 'datepicker'}, id: 'challenge_begindate_input'
          %p.help-block The begin date is the first day of your bible challenge.  On that day, the first emails containing the daily reading will go out.

        .form-group
          = f.label :enddate, "End Date"
          = f.text_field :enddate, value: f.object.enddate.try(:strftime,"%A, %-d %b, %Y"), required: true, class: "form-control", data: {behaviour: 'datepicker'}, id: 'challenge_enddate_input'
          %p.help-block The end date is the last day of your bible challenge.  The number of chapters will be arranged evenly on each day.  If you leave this blank, the challenge will have one chapter per day and the end date will be calculated automatically.

        .form-group
          = f.label :chapters_to_read, "Chapters to Read"
          = f.text_field :chapters_to_read, required: true, class: "form-control"
          %p.help-block Enter here, in reference form, the span of chapters you would like to read.  For example, "Matt 1-28" or "Matt 1-Rev 22"

        .form-group
          = f.label :dates_to_skip, "Dates to skip"
          = f.text_field :dates_to_skip, required: false, class: "form-control"
          %p.help-block Enter any spans of dates you want to skip, in the format "YYYY-MM-DD..YYYY-MM-DD".  For example, to skip November 1-7, 2016, you would enter 2016-11-01..2016-11-07

        .form-group
          %h5.strong Days of the week to skip

          %br
          .col-sm-3
            = f.check_box :days_of_week_to_skip, {multiple: true}, '0', false
            &nbsp; Lord's Day

          .col-sm-3
            = f.check_box :days_of_week_to_skip, {multiple: true}, '1', false
            &nbsp; Monday

          .col-sm-3
            = f.check_box :days_of_week_to_skip, {multiple: true}, '2', false
            &nbsp; Tuesday

          .col-sm-3
            = f.check_box :days_of_week_to_skip, {multiple: true}, '3', false
            &nbsp; Wednesday

          .col-sm-3
            = f.check_box :days_of_week_to_skip, {multiple: true}, '4', false
            &nbsp; Thursday

          .col-sm-3
            = f.check_box :days_of_week_to_skip, {multiple: true}, '5', false
            &nbsp; Friday

          .col-sm-3
            = f.check_box :days_of_week_to_skip, {multiple: true}, '6', false
            &nbsp; Saturday


        %br
        %br

        .form-group
          = f.submit class: 'btn btn-primary btn-block', disable_with: 'Please Wait...'
          = link_to "Delete this challenge", confirm_delete_creator_challenge_url(@challenge),class: "btn btn-danger btn-block" unless @challenge.new_record?


:javascript

  var $enddateinput = $('#challenge_enddate_input').pickadate({
    // Escape any “rule” characters with an exclamation mark (!).
    format: 'dddd, dd mmm, yyyy',
    formatSubmit: 'yyyy-mm-dd',
    clear: '',
    hiddenPrefix: 'date_format_',
    hiddenSuffix: 'data',
    editable: true
  });
  
  // From pickadate.js docs:
  // An important thing to note here is that this [editable: true] disables
  // keyboard bindings on the input element, such as arrow keys opening the
  // picker. You will have to add your own bindings as you see fit.
  // 
  // This enables the date picker to pop up even when editable is set to
  // true.
  var enddatepicker = $enddateinput.pickadate('picker');
  $enddateinput.on({
    'focus': enddatedatepickerHandler,
    'click': enddatedatepickerHandler
  });

  function enddatedatepickerHandler () {
    if (enddatepicker.get('open')) {
      enddatepicker.close();
    } else {
      enddatepicker.open();
    }                        
    event.stopPropagation();
  };

  //--------original below don't touch  

  var $input = $('#challenge_begindate_input').pickadate({
    // Escape any “rule” characters with an exclamation mark (!).
    format: 'dddd, dd mmm, yyyy',
    formatSubmit: 'yyyy-mm-dd',
    clear: '',
    hiddenPrefix: 'date_format_',
    hiddenSuffix: 'data',
    editable: true
  });
  
  // From pickadate.js docs:
  // An important thing to note here is that this [editable: true] disables
  // keyboard bindings on the input element, such as arrow keys opening the
  // picker. You will have to add your own bindings as you see fit.
  // 
  // This enables the date picker to pop up even when editable is set to
  // true.
  var picker = $input.pickadate('picker');
  $input.on({
    'focus': datepickerHandler,
    'click': datepickerHandler
  });

  function datepickerHandler () {
    if (picker.get('open')) {
      picker.close();
    } else {
      picker.open();
    }                        
    event.stopPropagation();
  };
